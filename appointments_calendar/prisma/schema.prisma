generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String?
  lastName      String?
  phone         String?
  emailVerified DateTime?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]

  @@map("users")
}

model Provider {
  id                     String               @id @default(cuid())
  name                   String
  email                  String               @unique
  phone                  String?
  passwordHash           String?
  isActive               Boolean              @default(true)
  company                String?
  title                  String?
  bio                    String?
  website                String?
  defaultBookingDuration Int                  @default(60)
  bufferTime             Int                  @default(15)
  advanceBookingDays     Int                  @default(30)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  bookings               Booking[]
  calendarConnections    CalendarConnection[]
  calendarEvents         CalendarEvent[]
  locations              ProviderLocation[]

  @@map("providers")
}

model ProviderLocation {
  id            String   @id @default(cuid())
  providerId    String
  city          String
  stateProvince String
  country       String
  description   String?
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean  @default(true)
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  provider      Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([startDate, endDate])
  @@index([city, stateProvince, country])
  @@index([providerId, isDefault])
  @@map("provider_locations")
}

model CalendarConnection {
  id                    String           @id @default(cuid())
  providerId            String
  platform              CalendarPlatform
  email                 String
  calendarId            String
  calendarName          String?
  accessToken           String
  refreshToken          String?
  tokenExpiry           DateTime?
  isDefaultForBookings  Boolean          @default(false)
  syncEvents            Boolean          @default(true)
  allowBookings         Boolean          @default(true)
  selectedCalendars     Json?            // Array of selected calendar IDs for multi-calendar platforms
  calendarSettings      Json?            // Per-calendar settings for multi-calendar platforms
  isActive              Boolean          @default(true)
  lastSyncAt            DateTime?
  syncFrequency         Int              @default(15)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  provider              Provider         @relation(fields: [providerId], references: [id], onDelete: Cascade)
  events                CalendarEvent[]

  @@unique([providerId, platform, calendarId])
  @@index([providerId, isDefaultForBookings])
  @@map("calendar_connections")
}

model CalendarEvent {
  id                String             @id @default(cuid())
  providerId        String
  connectionId      String
  externalEventId   String
  platform          CalendarPlatform
  calendarId        String
  title             String
  description       String?
  startTime         DateTime
  endTime           DateTime
  isAllDay          Boolean            @default(false)
  location          String?
  city              String?
  state             String?
  address           String?
  lat               Float?
  lng               Float?
  allowBookings     Boolean            @default(false)
  maxBookings       Int                @default(1)
  availableServices String[]           @default([])
  lastSyncAt        DateTime           @default(now())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookings          Booking[]
  connection        CalendarConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  provider          Provider           @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([externalEventId, platform, calendarId])
  @@index([providerId, startTime])
  @@index([startTime, endTime])
  @@index([city, state])
  @@map("calendar_events")
}

model Booking {
  id              String         @id @default(cuid())
  customerId      String
  providerId      String
  calendarEventId String?
  scheduledAt     DateTime
  duration        Int
  status          BookingStatus  @default(PENDING)
  serviceType     String
  notes           String?
  estimatedCost   Float?
  finalCost       Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  calendarEvent   CalendarEvent? @relation(fields: [calendarEventId], references: [id])
  customer        User           @relation(fields: [customerId], references: [id])
  provider        Provider       @relation(fields: [providerId], references: [id])

  @@index([scheduledAt])
  @@index([providerId, scheduledAt])
  @@index([calendarEventId])
  @@map("bookings")
}

model MagicLink {
  id        String           @id @default(cuid())
  email     String
  token     String           @unique
  purpose   MagicLinkPurpose
  data      Json?
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime         @default(now())

  @@index([token])
  @@index([email, expiresAt])
  @@map("magic_links")
}

enum CalendarPlatform {
  OUTLOOK
  GOOGLE
  TEAMS
  APPLE
  OTHER
}

enum MagicLinkPurpose {
  LOGIN
  BOOK_APPOINTMENT
  MODIFY_BOOKING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
