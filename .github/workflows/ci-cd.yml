# GitHub Actions CI/CD Pipeline for Zone Meet
# Automatically builds, tests, and validates code on every push

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Permissions needed for CodeQL security scanning
permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Set up Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'appointments_calendar/package-lock.json'
    
    # Cache node_modules and Next.js build cache for faster builds
    - name: Cache dependencies and Next.js build
      uses: actions/cache@v4
      with:
        path: |
          appointments_calendar/node_modules
          ~/.npm
          appointments_calendar/.next/cache
        # Generate a new cache whenever packages or source files change
        key: ${{ runner.os }}-nextjs-${{ hashFiles('appointments_calendar/package-lock.json') }}-${{ hashFiles('appointments_calendar/**/*.js', 'appointments_calendar/**/*.jsx', 'appointments_calendar/**/*.ts', 'appointments_calendar/**/*.tsx') }}
        # If source files changed but packages didn't, rebuild from a prior cache
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('appointments_calendar/package-lock.json') }}-
    
    # Install dependencies
    - name: Install dependencies
      working-directory: ./appointments_calendar
      run: npm ci
    
    # Run linting
    - name: Run ESLint
      working-directory: ./appointments_calendar
      run: npm run lint
    
    # Run type checking
    - name: TypeScript type check
      working-directory: ./appointments_calendar
      run: npx tsc --noEmit
    
    # Build the application with Next.js caching
    - name: Build application
      working-directory: ./appointments_calendar
      run: |
        # Ensure cache directory exists
        mkdir -p .next/cache
        # Build with cache enabled
        npm run build
      env:
        # Mock environment variables for build
        DATABASE_URL: "postgresql://user:pass@localhost:5432/test"
        DIRECT_URL: "postgresql://user:pass@localhost:5432/test"
        JWT_SECRET: "test-jwt-secret-for-build"
        NEXTAUTH_SECRET: "test-nextauth-secret-for-build"
        MAILEROO_API_KEY: "test-maileroo-key-for-build"
        MAILEROO_FROM_EMAIL: "test@example.com"
        GOOGLE_CLIENT_ID: "test-google-client-id"
        GOOGLE_CLIENT_SECRET: "test-google-client-secret"
        MICROSOFT_CLIENT_ID: "test-microsoft-client-id"
        MICROSOFT_CLIENT_SECRET: "test-microsoft-client-secret"
        OUTLOOK_CLIENT_ID: "test-outlook-client-id"
        OUTLOOK_CLIENT_SECRET: "test-outlook-client-secret"
        TEAMS_CLIENT_ID: "test-teams-client-id"
        TEAMS_CLIENT_SECRET: "test-teams-client-secret"
        CRON_SECRET: "test-cron-secret-for-build"
        NODE_ENV: "production"
    
    # Security audit
    - name: Security audit
      working-directory: ./appointments_calendar
      run: npm audit --audit-level high
      continue-on-error: true
    
    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          appointments_calendar/.next
          appointments_calendar/package.json
          appointments_calendar/package-lock.json
        retention-days: 1

  # Security Scanning Job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Run CodeQL analysis for security vulnerabilities
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Deployment Validation Job (runs on main branch only)
  validate-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Validate render.yaml syntax
    - name: Validate render.yaml
      run: |
        # Basic YAML syntax validation
        python -c "import yaml; yaml.safe_load(open('render.yaml', 'r'))"
    
    # Check for environment variables documentation
    - name: Validate environment setup
      run: |
        echo "‚úÖ Checking required files exist..."
        ls -la appointments_calendar/package.json
        ls -la render.yaml
        ls -la ENVIRONMENT_VARIABLES.md || echo "‚ö†Ô∏è Consider adding ENVIRONMENT_VARIABLES.md"
        echo "‚úÖ Deployment validation complete"

  # Auto-deploy notification (optional)
  deployment-ready:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, validate-deployment]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment Ready Notification
      run: |
        echo "üöÄ All checks passed! Code is ready for deployment to Render."
        echo "üìã Summary:"
        echo "   ‚úÖ Build successful"
        echo "   ‚úÖ Linting passed"
        echo "   ‚úÖ Type checking passed"
        echo "   ‚úÖ Security scan completed"
        echo "   ‚úÖ Deployment validation passed"
        echo ""
        echo "üîÑ Render will auto-deploy from this commit if autoDeploy is enabled."